// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.neerogi;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.neerogi.Consultation;
import org.neerogi.ConsultationDataOnDemand;
import org.neerogi.Doctors;
import org.neerogi.DoctorsDataOnDemand;
import org.neerogi.Hospital;
import org.neerogi.HospitalDataOnDemand;
import org.neerogi.Patient;
import org.neerogi.PatientDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ConsultationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ConsultationDataOnDemand: @Component;
    
    private Random ConsultationDataOnDemand.rnd = new SecureRandom();
    
    private List<Consultation> ConsultationDataOnDemand.data;
    
    @Autowired
    DoctorsDataOnDemand ConsultationDataOnDemand.doctorsDataOnDemand;
    
    @Autowired
    HospitalDataOnDemand ConsultationDataOnDemand.hospitalDataOnDemand;
    
    @Autowired
    PatientDataOnDemand ConsultationDataOnDemand.patientDataOnDemand;
    
    public Consultation ConsultationDataOnDemand.getNewTransientConsultation(int index) {
        Consultation obj = new Consultation();
        setDate(obj, index);
        setDoctorId(obj, index);
        setHospitalId(obj, index);
        setPatientId(obj, index);
        return obj;
    }
    
    public void ConsultationDataOnDemand.setDate(Consultation obj, int index) {
        Calendar date = Calendar.getInstance();
        obj.setDate(date);
    }
    
    public void ConsultationDataOnDemand.setDoctorId(Consultation obj, int index) {
        Doctors doctorId = doctorsDataOnDemand.getRandomDoctors();
        obj.setDoctorId(doctorId);
    }
    
    public void ConsultationDataOnDemand.setHospitalId(Consultation obj, int index) {
        Hospital hospitalId = hospitalDataOnDemand.getRandomHospital();
        obj.setHospitalId(hospitalId);
    }
    
    public void ConsultationDataOnDemand.setPatientId(Consultation obj, int index) {
        Patient patientId = patientDataOnDemand.getRandomPatient();
        obj.setPatientId(patientId);
    }
    
    public Consultation ConsultationDataOnDemand.getSpecificConsultation(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Consultation obj = data.get(index);
        Integer id = obj.getId();
        return Consultation.findConsultation(id);
    }
    
    public Consultation ConsultationDataOnDemand.getRandomConsultation() {
        init();
        Consultation obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return Consultation.findConsultation(id);
    }
    
    public boolean ConsultationDataOnDemand.modifyConsultation(Consultation obj) {
        return false;
    }
    
    public void ConsultationDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Consultation.findConsultationEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Consultation' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Consultation>();
        for (int i = 0; i < 10; i++) {
            Consultation obj = getNewTransientConsultation(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
