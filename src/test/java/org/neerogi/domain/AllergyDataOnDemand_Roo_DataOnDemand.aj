// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.neerogi.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.neerogi.domain.Allergy;
import org.neerogi.domain.AllergyDataOnDemand;
import org.neerogi.domain.Patient;
import org.neerogi.domain.PatientDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AllergyDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AllergyDataOnDemand: @Component;
    
    private Random AllergyDataOnDemand.rnd = new SecureRandom();
    
    private List<Allergy> AllergyDataOnDemand.data;
    
    @Autowired
    PatientDataOnDemand AllergyDataOnDemand.patientDataOnDemand;
    
    public Allergy AllergyDataOnDemand.getNewTransientAllergy(int index) {
        Allergy obj = new Allergy();
        setDescription(obj, index);
        setPatientId(obj, index);
        setType(obj, index);
        return obj;
    }
    
    public void AllergyDataOnDemand.setDescription(Allergy obj, int index) {
        String description = "description_" + index;
        if (description.length() > 1000) {
            description = description.substring(0, 1000);
        }
        obj.setDescription(description);
    }
    
    public void AllergyDataOnDemand.setPatientId(Allergy obj, int index) {
        Patient patientId = patientDataOnDemand.getRandomPatient();
        obj.setPatientId(patientId);
    }
    
    public void AllergyDataOnDemand.setType(Allergy obj, int index) {
        String type = "type_" + index;
        if (type.length() > 1000) {
            type = type.substring(0, 1000);
        }
        obj.setType(type);
    }
    
    public Allergy AllergyDataOnDemand.getSpecificAllergy(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Allergy obj = data.get(index);
        Integer id = obj.getId();
        return Allergy.findAllergy(id);
    }
    
    public Allergy AllergyDataOnDemand.getRandomAllergy() {
        init();
        Allergy obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return Allergy.findAllergy(id);
    }
    
    public boolean AllergyDataOnDemand.modifyAllergy(Allergy obj) {
        return false;
    }
    
    public void AllergyDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Allergy.findAllergyEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Allergy' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Allergy>();
        for (int i = 0; i < 10; i++) {
            Allergy obj = getNewTransientAllergy(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
