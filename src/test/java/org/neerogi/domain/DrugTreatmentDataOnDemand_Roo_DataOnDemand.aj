// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.neerogi.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.neerogi.domain.DrugTreatment;
import org.neerogi.domain.DrugTreatmentDataOnDemand;
import org.neerogi.domain.Treatment;
import org.neerogi.domain.TreatmentDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DrugTreatmentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DrugTreatmentDataOnDemand: @Component;
    
    private Random DrugTreatmentDataOnDemand.rnd = new SecureRandom();
    
    private List<DrugTreatment> DrugTreatmentDataOnDemand.data;
    
    @Autowired
    TreatmentDataOnDemand DrugTreatmentDataOnDemand.treatmentDataOnDemand;
    
    public DrugTreatment DrugTreatmentDataOnDemand.getNewTransientDrugTreatment(int index) {
        DrugTreatment obj = new DrugTreatment();
        setDose(obj, index);
        setDuration(obj, index);
        setFrequency(obj, index);
        setMedicalName(obj, index);
        setName(obj, index);
        setTreatment(obj, index);
        return obj;
    }
    
    public void DrugTreatmentDataOnDemand.setDose(DrugTreatment obj, int index) {
        String dose = "dose_" + index;
        if (dose.length() > 1000) {
            dose = dose.substring(0, 1000);
        }
        obj.setDose(dose);
    }
    
    public void DrugTreatmentDataOnDemand.setDuration(DrugTreatment obj, int index) {
        String duration = "duration_" + index;
        if (duration.length() > 1000) {
            duration = duration.substring(0, 1000);
        }
        obj.setDuration(duration);
    }
    
    public void DrugTreatmentDataOnDemand.setFrequency(DrugTreatment obj, int index) {
        String frequency = "frequency_" + index;
        if (frequency.length() > 1000) {
            frequency = frequency.substring(0, 1000);
        }
        obj.setFrequency(frequency);
    }
    
    public void DrugTreatmentDataOnDemand.setMedicalName(DrugTreatment obj, int index) {
        String medicalName = "medicalName_" + index;
        if (medicalName.length() > 1000) {
            medicalName = medicalName.substring(0, 1000);
        }
        obj.setMedicalName(medicalName);
    }
    
    public void DrugTreatmentDataOnDemand.setName(DrugTreatment obj, int index) {
        String name = "name_" + index;
        if (name.length() > 1000) {
            name = name.substring(0, 1000);
        }
        obj.setName(name);
    }
    
    public void DrugTreatmentDataOnDemand.setTreatment(DrugTreatment obj, int index) {
        Treatment treatment = treatmentDataOnDemand.getRandomTreatment();
        obj.setTreatment(treatment);
    }
    
    public DrugTreatment DrugTreatmentDataOnDemand.getSpecificDrugTreatment(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DrugTreatment obj = data.get(index);
        Integer id = obj.getId();
        return DrugTreatment.findDrugTreatment(id);
    }
    
    public DrugTreatment DrugTreatmentDataOnDemand.getRandomDrugTreatment() {
        init();
        DrugTreatment obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return DrugTreatment.findDrugTreatment(id);
    }
    
    public boolean DrugTreatmentDataOnDemand.modifyDrugTreatment(DrugTreatment obj) {
        return false;
    }
    
    public void DrugTreatmentDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = DrugTreatment.findDrugTreatmentEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DrugTreatment' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DrugTreatment>();
        for (int i = 0; i < 10; i++) {
            DrugTreatment obj = getNewTransientDrugTreatment(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
