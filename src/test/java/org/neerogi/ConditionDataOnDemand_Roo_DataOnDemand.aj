// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.neerogi;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.neerogi.Condition;
import org.neerogi.ConditionDataOnDemand;
import org.neerogi.ConditionSubTypesDataOnDemand;
import org.neerogi.Patient;
import org.neerogi.PatientDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ConditionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ConditionDataOnDemand: @Component;
    
    private Random ConditionDataOnDemand.rnd = new SecureRandom();
    
    private List<Condition> ConditionDataOnDemand.data;
    
    @Autowired
    ConditionSubTypesDataOnDemand ConditionDataOnDemand.conditionSubTypesDataOnDemand;
    
    @Autowired
    PatientDataOnDemand ConditionDataOnDemand.patientDataOnDemand;
    
    public Condition ConditionDataOnDemand.getNewTransientCondition(int index) {
        Condition obj = new Condition();
        setConditionType(obj, index);
        setConsultationId(obj, index);
        setDate(obj, index);
        setDescription(obj, index);
        setFollowUp(obj, index);
        setName(obj, index);
        setPatientId(obj, index);
        return obj;
    }
    
    public void ConditionDataOnDemand.setConditionType(Condition obj, int index) {
        String conditionType = "conditionType_" + index;
        if (conditionType.length() > 1000) {
            conditionType = conditionType.substring(0, 1000);
        }
        obj.setConditionType(conditionType);
    }
    
    public void ConditionDataOnDemand.setConsultationId(Condition obj, int index) {
        Integer consultationId = new Integer(index);
        obj.setConsultationId(consultationId);
    }
    
    public void ConditionDataOnDemand.setDate(Condition obj, int index) {
        Calendar date = Calendar.getInstance();
        obj.setDate(date);
    }
    
    public void ConditionDataOnDemand.setDescription(Condition obj, int index) {
        String description = "description_" + index;
        if (description.length() > 1000) {
            description = description.substring(0, 1000);
        }
        obj.setDescription(description);
    }
    
    public void ConditionDataOnDemand.setFollowUp(Condition obj, int index) {
        Boolean followUp = true;
        obj.setFollowUp(followUp);
    }
    
    public void ConditionDataOnDemand.setName(Condition obj, int index) {
        String name = "name_" + index;
        if (name.length() > 1000) {
            name = name.substring(0, 1000);
        }
        obj.setName(name);
    }
    
    public void ConditionDataOnDemand.setPatientId(Condition obj, int index) {
        Patient patientId = patientDataOnDemand.getRandomPatient();
        obj.setPatientId(patientId);
    }
    
    public Condition ConditionDataOnDemand.getSpecificCondition(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Condition obj = data.get(index);
        Integer id = obj.getId();
        return Condition.findCondition(id);
    }
    
    public Condition ConditionDataOnDemand.getRandomCondition() {
        init();
        Condition obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return Condition.findCondition(id);
    }
    
    public boolean ConditionDataOnDemand.modifyCondition(Condition obj) {
        return false;
    }
    
    public void ConditionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Condition.findConditionEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Condition' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Condition>();
        for (int i = 0; i < 10; i++) {
            Condition obj = getNewTransientCondition(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
